---
title: "AE 20: a dataset's life"
---

```{r}
#| message: false
library(tidyverse)
library(tidymodels)
```


```{r}
#| include: false
#| echo: false
#| message: false
#| warning: false

library(palmerpenguins)

set.seed(123456)

penguins <- palmerpenguins::penguins |>
  mutate(
    earth_weight_lb = 0.00220462 * body_mass_g,
    id = 1:nrow(penguins)
  ) |>
  select(id, species, island, sex, flipper_length_mm, earth_weight_lb)

penguins_venus <- penguins |> 
  mutate(weight_lb =  0.91 * earth_weight_lb + rnorm(nrow(penguins))) |>
  select(id, species, island, sex, flipper_length_mm, weight_lb)
  
penguins_mars <- penguins |> 
  mutate(weight_lb =  0.38 * earth_weight_lb + rnorm(nrow(penguins))) |>
  select(id, weight_lb)

write_csv(penguins_venus, "data/penguins_venus.csv")
write_csv(penguins_mars, "data/penguins_mars.csv")
```

If you are like me, you are sick of the penguins at this point. So for our last act, let's banish them to worlds beyond. I packed all of those lil' beasts onto a rocket ship and took them to both Mars and Venus, where I recorded their weights (in pounds). I then abandoned the ship to hurtle through space so that future STAWAHNAHNAH students never have to study them again. 

# Preparation 

## Load the data 

I have two sets of measurements for the same sample of penguins: one set taken on Mars, and another on Venus. They are contained in two separate files that need to be merged:

```{r}
#| message: false
penguins_venus <- read_csv("data/penguins_venus.csv")
penguins_mars <- read_csv("data/penguins_mars.csv")
```

## Merge the data 

**Task**: Use an appropriate `join` function to create a new data frame called `space_penguins`:

```{r}
space_penguins <- full_join(penguins_venus, penguins_mars, by = join_by(id)) |>
  rename(venus_weight = weight_lb.x,
         mars_weight = weight_lb.y)
```

## Reshape the data 

**Task**: Use an appropriate `pivot` function to create a new version of `space_penguins` where the information on the planet where the measurements were taken is its own column:

```{r}

space_penguins <- space_penguins |>
  mutate(
    mars_weight = case_when(
      mars_weight == "get wrecked" ~ NA,
      mars_weight == "this is why we can't have nice things" ~ NA,
      .default = mars_weight
    ),
    mars_weight = as.numeric(mars_weight)
    )

space_penguins_long <- space_penguins |>
  pivot_longer(
    cols = c(venus_weight, mars_weight),
    names_to = "planet",
    values_to = "weight_lb"
  ) |>
  mutate(
    planet = if_else(planet == "venus_weight", "Venus", "Mars")
  )
```


# Exploration 

## Pictures

**Task**: Generate side-by-side density plots of the weights on each planet.


```{r}
ggplot(space_penguins_long, aes(x = weight_lb, fill = planet)) + 
  geom_density(alpha = 0.5)
```

## A concise set of numerical summaries

**Task**: compute the mean, standard deviation, and median of weight on each planet:


```{r}
space_penguins_long |>
  group_by(planet) |>
  summarize(
    mean(weight_lb, na.rm = TRUE),
    sd(weight_lb, na.rm = TRUE),
    median(weight_lb, na.rm = TRUE)
  )
```

# Modeling 

What is the conversion factor between weights on venus and weights on mars? If you ask a physicist, I'm pretty sure they will tell you it's this:

$$
mars~weight~(lb)\approx venus~weight~(lb)\times 0.41.
$$

So, you weigh less on Mars than you do on Venus. If we didn't already know this, could we learn it from our data? Note that is is not a foregone conclusion, because our data are *noisy*. The weights have been measured *with error*, and so what should be a perfect straight line relationship won't be, exactly.

## Linear 

**Task**: Create a scatterplot of Venus weights versus Mars weights, and add a line of best fit:


```{r}
ggplot(space_penguins, aes(x = venus_weight, y = mars_weight)) + 
  geom_point() + 
  geom_smooth(method = "lm")
```

**Task**: Compute the estimated slope and intercept of the best fit line:


```{r}
linear_fit <- linear_reg() |>
  fit(mars_weight ~ venus_weight, data = space_penguins)

tidy(linear_fit)
```


## Logistic

**Task**: fit a logistic regression that predicts the probability of a measurement being taken on mars from the weight:

```{r}
space_penguins_long <- space_penguins_long |>
  mutate(planet = as_factor(planet))
```

```{r}
ggplot(space_penguins_long, aes(x = weight_lb, y = as.numeric(planet) - 1)) + 
  geom_point()
```


```{r}
logistic_fit <- logistic_reg() |>
  fit(planet ~ weight_lb, data = space_penguins_long)

tidy(logistic_fit)
```

**Task**: generate the ROC curve for this model:

```{r}
log_aug <- augment(logistic_fit, space_penguins_long)

log_roc <- roc_curve(log_aug, 
                     truth = planet, 
                     .pred_Mars, 
                     event_level = "second")

ggplot(log_roc, aes(x = 1 - specificity, y = sensitivity)) +
  geom_path() +
  geom_abline(lty = 3) +
  coord_equal() + 
  theme_minimal()
```


# Inference

Back to linear regression now...

## Interval estimation

**Task**: Compute, visualize, and interpret a 95% confidence interval for the slope of the regression line:


```{r}
observed_fit <- space_penguins |>
  specify(mars_weight ~ venus_weight) |>
  fit()

set.seed(8675309)
boot_fits <- space_penguins |>
  specify(mars_weight ~ venus_weight) |>
  generate(reps = 1000, type = "bootstrap") |>
  fit()

ci_90 <- get_confidence_interval(
  boot_fits,
  point_estimate = observed_fit,
  level = 0.95,
  type = "percentile"
)
ci_90

visualize(boot_fits) + 
  shade_confidence_interval(ci_90)
```


## Hypothesis testing

**Task**: Test the following hypotheses at the 5% level:

$$
\begin{aligned}
H_0&:\beta_1=0\\
H_A&:\beta_1\neq0
\end{aligned}
$$

```{r}
set.seed(20)
null_dist <- space_penguins |>
  specify(mars_weight ~ venus_weight) |>
  hypothesize(null = "independence") |>
  generate(reps = 1000, type = "permute") |>
  fit()

visualize(null_dist) +
  shade_p_value(obs_stat = observed_fit, direction = "two-sided")

null_dist |>
  get_p_value(obs_stat = observed_fit, direction = "two-sided")
```

**Task**: Test the following hypotheses at the 5% level:

$$
\begin{aligned}
H_0&:\beta_1=0.41\\
H_A&:\beta_1\neq0.41
\end{aligned}
$$

# BONUS: regression through the origin

```{r}
observed_fit <- space_penguins |>
  specify(mars_weight ~ venus_weight - 1) |>
  fit()

set.seed(8675309)
boot_fits <- space_penguins |>
  specify(mars_weight ~ venus_weight - 1) |>
  generate(reps = 1000, type = "bootstrap") |>
  fit()

ci_90 <- get_confidence_interval(
  boot_fits,
  point_estimate = observed_fit,
  level = 0.95,
  type = "percentile"
)
ci_90

visualize(boot_fits) + 
  shade_confidence_interval(ci_90)
```

```{r}
ggplot(space_penguins, aes(x = venus_weight, y = mars_weight)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE, formula = y ~ x - 1) + 
  geom_smooth(method = "lm", se = FALSE, color = "red")
```


