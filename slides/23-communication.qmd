---
title: "Data science communication"
subtitle: "Lecture 23"
date: "2025-4-17"
format: revealjs
auto-stretch: false
---

## While you wait

```{r}
#| label: load-packages
#| message: false
#| echo: false

todays_ae <- "ae-19-effective-dataviz"

```

-   Go to your `ae` project in RStudio.

-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   Click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Wait until you're prompted to work on the application exercise during class before editing the file.


# Telling a story

## Setup

```{r}
#| message: false
library(tidyverse)
library(tidymodels)
library(ggrepel)
library(ggthemes)
library(palmerpenguins)
```


## Multiple ways of telling a story

-   Sequential reveal: Motivation, then resolution

-   Instant reveal: Resolution, and hidden in it motivation

## Simplicity vs. complexity {.smaller}

> When you're trying to show too much data at once you may end up not showing anything.

-   Never assume your audience can rapidly process complex visual displays

-   Don't add variables to your plot that are tangential to your story

-   Don't jump straight to a highly complex figure; first show an easily digestible subset (e.g., show one facet first)

-   Aim for memorable, but clear

::: {.callout-note appearance="minimal"}
**Project note:** Make sure to leave time to iterate on your plots after you practice your presentation. If certain plots or outputs are getting too wordy to explain, take time to simplify them!
:::

## Consistency vs. repetitiveness

> Be consistent but don't be repetitive.

-   Use consistent features throughout plots (e.g., same color represents same level on all plots)

-   Aim to use a different type of summary or visualization for each distinct analysis

::: {.callout-note appearance="minimal"}
**Project note:** If possible, ask a friend who is not in the class to listen to your presentation and then ask them what they remember. Then, ask yourself: is that what you wanted them to remember?
:::

## Your project plans

::: task
How are you telling your story?

a.  Sequential reveal

b.  Instant reveal

c.  Our approach doesn't fit either of these paradigms

d.  No idea
:::

# Designing effective visualizations

## Data {.medium}



```{r}
#| output-location: column

d <- tribble(
  ~category,                     ~value,
  "Cutting tools"                , 0.03,
  "Buildings and administration" , 0.22,
  "Labor"                        , 0.31,
  "Machinery"                    , 0.27,
  "Workplace materials"          , 0.17
)
d
```

## Keep it simple

::: columns
::: {.column width="40%"}
![](images/23/pie.jpg)
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| out-width: "100%"
#| fig-width: 4
#| fig-asp: 0.5

ggplot(d, aes(y = fct_reorder(category, value), x = value)) +
  geom_col() +
  labs(x = NULL, y = NULL)
```
:::
:::

## Judging relative area

![](images/23/pie-areas.png){fig-align="center" width="800"}

. . .

![](images/23/bar-areas.png){fig-align="center" width="800"}

::: aside
From Data to Viz caveat collection - [The issue with pie chart](https://www.data-to-viz.com/caveat/pie.html)
:::

## Use color to draw attention

<br/> <br/>

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| fig-width: 4
#| fig-asp: 0.5

ggplot(d, aes(x = category, y = value, fill = category)) +
  geom_col(show.legend = FALSE) +
  labs(x = NULL, y = NULL) +
  scale_x_discrete(labels = label_wrap_gen(width = 20))
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| out-width: "100%"
#| fig-width: 4
#| fig-asp: 0.5

p <- ggplot(d, aes(y = fct_reorder(category, value), x = value, fill = category)) +
  geom_col(show.legend = FALSE) +
  labs(x = NULL, y = NULL) +
  scale_fill_manual(values = c("red", rep("gray", 4)))

p
```
:::
:::

## Play with themes for a non-standard look {.smaller}

```{r}
#| out-width: "100%"
#| fig-width: 4
#| fig-asp: 0.5
#| layout-ncol: 2
#| echo: false

p + theme_bw() + labs(title = "theme_bw()")
p + theme_linedraw() + labs(title = "theme_linedraw()")
p + theme_minimal() + labs(title = "theme_minimal()")
p + theme_dark() + labs(title = "theme_dark()")
```

## Go beyond ggplot2 themes -- ggthemes {.smaller}

```{r}
#| out-width: "100%"
#| fig-width: 5
#| fig-asp: 0.5
#| layout-ncol: 2
#| echo: false

p + theme_economist() + labs(title = "theme_economist()")
p + theme_fivethirtyeight() + labs(title = "theme_fivethirtyeight()")
p + theme_solarized() + labs(title = "theme_solarized()")
p + theme_tufte() + labs(title = "theme_tufte()")
```

## Tell a story

::: columns
::: {.column width="50%"}
![](images/23/duke-hires-1.png){fig-align="center"}
:::

::: {.column width="50%"}
![](images/23/duke-hires-2.png){fig-align="center"}
:::
:::

::: aside
*Credit*: Angela Zoss and Eric Monson, Duke DVS
:::

## Leave out non-story details

::: columns
::: {.column width="50%"}
![](images/23/too-many-details.png){fig-align="center"}
:::

::: {.column width="50%"}
![](images/23/fewer-details.png){fig-align="center"}
:::
:::

::: aside
*Credit*: Angela Zoss and Eric Monson, Duke DVS
:::

## Order matters

::: columns
::: {.column width="50%"}
![](images/23/unordered.png){fig-align="center"}
:::

::: {.column width="50%"}
![](images/23/ordered.png){fig-align="center"}
:::
:::

::: aside
*Credit*: Angela Zoss and Eric Monson, Duke DVS
:::

## Clearly indicate missing data

![](images/23/missing-data.png){fig-align="center"}

::: aside
http://ivi.sagepub.com/content/10/4/271, Angela Zoss and Eric Monson, Duke DVS
:::

## Reduce cognitive load

![](images/23/cognitive-load.png){fig-align="center"}

::: aside
http://www.storytellingwithdata.com/2012/09/some-finer-points-of-data-visualization.html
:::

## Use descriptive titles

::: columns
::: {.column width="50%"}
![](images/23/title-non-descriptive.png){fig-align="center"}
:::

::: {.column width="50%"}
![](images/23/title-descriptive.png){fig-align="center"}
:::
:::

::: aside
*Credit*: Angela Zoss and Eric Monson, Duke DVS
:::

## Annotate figures

![](images/23/annotate.png){fig-align="center"}

::: aside
https://bl.ocks.org/susielu/23dc3082669ee026c552b85081d90976
:::

# Plot sizing and layout

## Sample plots

```{r}
#| fig-show: hide

p_hist <- ggplot(mtcars, aes(x = mpg)) +
  geom_histogram(binwidth = 2)

p_text <- mtcars |>
  rownames_to_column() |>
  ggplot(aes(x = disp, y = mpg)) +
  geom_text_repel(aes(label = rowname)) +
  coord_cartesian(clip = "off")
```

## Small `fig-width`

For a zoomed-in look

```{r}
#| echo: fenced
#| fig-width: 3
#| fig-asp: 0.618

p_hist
```

## Large `fig-width`

For a zoomed-out look

```{r}
#| echo: fenced
#| fig-width: 6
#| fig-asp: 0.618

p_hist
```

## `fig-width` affects text size

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| warning: false
#| fig-width: 5
#| fig-asp: 0.618

p_text +
  labs(title = "fig.width = 5")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig-width: 10
#| fig-asp: 0.618

p_text +
  labs(title = "fig.width = 10")
```
:::
:::

## Multiple plots on a slide

::: {.callout-warning appearance="minimal"}
First, ask yourself, must you include multiple plots on a slide? For example, is your narrative about comparing results from two plots?
:::

-   If no, then don't! Move the second plot to to the next slide!

-   If yes, use columns and sequential reveal.

# Quarto

## Writing your project report with Quarto

-   Figure sizing: `fig-width`, `fig-height`, etc. in code chunks.

-   Figure layout: `layout-ncol` for placing multiple figures in a chunk.

-   Further control over figure layout with the **patchwork** package.

-   Chunk options around what makes it in your final report: `message`, `echo`, etc.

-   Cross referencing figures and tables.

-   Adding footnotes and citations.

## Cross referencing figures {.smaller}

::: panel-tabset
## Output

As seen in @fig-penguins, there is a positive and relatively strong relationship between body mass and flipper length of penguins.

```{r}
#| label: fig-penguins
#| fig-cap: The relationship between body mass and flipper length of penguins.
#| fig-width: 5
#| fig-asp: 0.618
#| fig-align: left

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
```

## Input

````         
As seen in @fig-penguins, there is a positive and relatively strong relationship between body mass and flipper length of penguins.

```{{r}}
#| label: fig-penguins

ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
```
````
:::

## Cross referencing tables {.smaller}

::: panel-tabset
## Output

The regression output is shown in @tbl-penguins-lm.

```{r}
#| label: tbl-penguins-lm
#| tbl-cap: The regression output for predicting body mass from flipper length of penguins.

penguins_fit <- linear_reg() |>
  fit(body_mass_g ~ flipper_length_mm, data = penguins)

tidy(penguins_fit) |>
  knitr::kable(digits = 3)
```

## Input

````         
The regression output is shown in @tbl-penguins-lm.

```{{r}}
#| label: tbl-penguins-lm
#| tbl-cap: The regression output for predicting body mass from flipper length of penguins.

penguins_fit <- linear_reg() |>
  fit(body_mass_g ~ flipper_length_mm, data = penguins)

tidy(penguins_fit) |>
  knitr::kable(digits = 3)
```
````
:::

# Take A Sad Plot & Make It Better 

## Going the extra mile

![](images/23/sad-plot-to-better.gif){width="50%"}

## Trends instructional staff employees in universities {.smaller .scrollable}

The American Association of University Professors (AAUP) is a nonprofit membership association of faculty and other academic professionals.
[This report](https://www.aaup.org/sites/default/files/files/AAUP_Report_InstrStaff-75-11_apr2013.pdf) by the AAUP shows trends in instructional staff employees between 1975 and 2011, and contains the following image.
What trends are apparent in this visualization?

![](images/23/staff-employment.png){fig-align="center"}

## `{r} todays_ae`

::: appex
-   Go to your ae project in RStudio.

-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   If you haven't yet done so, click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Work through the application exercise in class, and render, commit, and push your edits.
:::

## Data prep

```{r}
#| label: load-data-staff
#| message: false
#| code-fold: true
library(tidyverse)
library(scales)

staff <- read_csv("data/instructional-staff.csv")

staff_long <- staff |>
  pivot_longer(
    cols = -faculty_type, names_to = "year",
    values_to = "percentage"
  ) |>
  mutate(
    percentage = as.numeric(percentage),
    faculty_type = fct_relevel(
      faculty_type,
      "Full-Time Tenured Faculty",
      "Full-Time Tenure-Track Faculty",
      "Full-Time Non-Tenure-Track Faculty",
      "Part-Time Faculty",
      "Graduate Student Employees"
    ),
    year = as.numeric(year),
    faculty_type_color = if_else(faculty_type == "Part-Time Faculty", "firebrick3", "gray40")
  )
```

## Pick a purpose {.smaller}

```{r}
#| fig-asp: 0.5
#| fig-width: 12.0
#| code-fold: true
p <- ggplot(
  staff_long,
  aes(
    x = year,
    y = percentage,
    color = faculty_type_color, group = faculty_type
    )
  ) +
  geom_line(linewidth = 1, show.legend = FALSE) +
  labs(
    x = NULL,
    y = "Percent of Total Instructional Staff",
    color = NULL,
    title = "Trends in Instructional Staff Employment Status, 1975-2011",
    subtitle = "All Institutions, National Totals",
    caption = "Source: US Department of Education, IPEDS Fall Staff Survey"
  ) +
  scale_y_continuous(labels = label_percent(accuracy = 1, scale = 1)) +
  scale_color_identity() +
  theme(
    plot.caption = element_text(size = 8, hjust = 0),
    plot.margin = margin(0.1, 0.6, 0.1, 0.1, unit = "in")
  ) +
  coord_cartesian(clip = "off") +
  annotate(
    geom = "text",
    x = 2012, y = 41, label = "Part-Time\nFaculty",
    color = "firebrick3", hjust = "left", size = 5
  ) +
  annotate(
    geom = "text",
    x = 2012, y = 13.5, label = "Other\nFaculty",
    color = "gray40", hjust = "left", size = 5
  ) +
  annotate(
    geom = "segment",
    x = 2011.5, xend = 2011.5,
    y = 7, yend = 20,
    color = "gray40", linetype = "dotted"
  )

p
```

## Use labels to communicate the message {.smaller}

```{r}
#| fig-asp: 0.5
#| fig-width: 12.0
#| code-fold: true
p +
  labs(
    title = "Instruction by part-time faculty on a steady increase",
    subtitle = "Trends in Instructional Staff Employment Status, 1975-2011\nAll Institutions, National Totals",
    caption = "Source: US Department of Education, IPEDS Fall Staff Survey",
    y = "Percent of Total Instructional Staff",
    x = NULL
  )
```

## Simplify {.smaller}

```{r}
#| fig-asp: 0.5
#| fig-width: 12.0
#| code-fold: true
p +
  labs(
    title = "Instruction by part-time faculty on a steady increase",
    subtitle = "Trends in Instructional Staff Employment Status, 1975-2011\nAll Institutions, National Totals",
    caption = "Source: US Department of Education, IPEDS Fall Staff Survey",
    y = "Percent of Total Instructional Staff",
    x = NULL
  ) +
  theme(panel.grid.minor = element_blank())
```

## Summary {.smaller}

-   Represent percentages as parts of a whole
-   Place variables representing time on the x-axis when possible
-   Pay attention to data types, e.g., represent time as time on a continuous scale, not years as levels of a categorical variable
-   Prefer direct labeling over legends
-   Use accessible colors
-   Use color to draw attention
-   Pick a purpose and label, color, annotate for that purpose
-   Communicate your main message directly in the plot labels
-   Simplify before you call it done (a.k.a. "Before you leave the house, look in the mirror and take one thing off")