---
title: "Tidying data"
subtitle: "Lecture 6"
date: "2025-01-30"
format: revealjs
auto-stretch: false
---

<!-- begin: ae definition -->

```{r}
#| include: false
library(tidyverse)
todays_ae <- "ae-05-majors-tidy"
```

<!-- end: ae definition -->

# Warm-up

## While you wait... {.smaller}

Prepare for today's application exercise: **`{r} todays_ae`**

::: appex
-   Go to your `ae` project in RStudio.

-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   Click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Wait till the you're prompted to work on the application exercise during class before editing the file.
:::

::: callout-note
## AEs are due by the end of class

Successful completion means at least one commit + push by 2PM today
:::

## Intro to Coding Principles with Dav King

::: {.columns .v-center-container}
::: column
-   8:30 PM **Tonight!**;
-   Social Sciences 139;
-   Space is limited, so please sign up;
-   Materials will be posted afterward;
-   We might do more if there is interest and Dav is available.
:::

![](images/05/dav_qr.png)
:::

:::

## Syllabus clarifications {.medium}

::: {.incremental}

- You can miss 30% of AEs before it starts affecting your final grade. This policy is meant to smooth over technical mishaps, absences due to illness, athletics, etc. So we're generally not granting extensions or exemptions. Just let the 30% policy do its thing;
- **ChatGPT**: Thank (most of) you for citing! But please do not just dump the question verbatim into the chat. It irritates my valve;
- Lab grade includes *workflow points*:

  - Git was configured successfully such that a GitHub name is associated with the commit on GitHub (i.e., did Lab 0 successfully).
  
  - PDF exists in GitHub repo for lab.
  
  - At least 3 commits were made and pushed to the GitHub repo for lab.
:::

## Miscellany: logical operators

Generally useful in a `filter()` but will come up in various other places as well...

| operator | definition                                |
|:---------|:------------------------------------------|
| `<`      | [is less than?]{.fragment}                |
| `<=`     | [is less than or equal to?]{.fragment}    |
| `>`      | [is greater than?]{.fragment}             |
| `>=`     | [is greater than or equal to?]{.fragment} |
| `==`     | [is exactly equal to?]{.fragment}         |
| `!=`     | [is not equal to?]{.fragment}             |

: {tbl-colwidths="\[25,75\]"}

## Miscellany: logical operators (cont.) {.medium}

Generally useful in a `filter()` but will come up in various other places as well...

| operator      | definition                                                            |
|:--------------|:----------------------------------------------------------------------|
| `x & y`       | [is x AND y?]{.fragment}                                              |
| `x | y`      | [is x OR y?]{.fragment}                                               |
| `is.na(x)`    | [is x NA?]{.fragment}                                                 |
| `!is.na(x)`   | [is x not NA?]{.fragment}                                             |
| `x %in% y`    | [is x in y?]{.fragment}                                               |
| `!(x %in% y)` | [is x not in y?]{.fragment}                                           |
| `!x`          | [is not x? (only makes sense if `x` is `TRUE` or `FALSE`)]{.fragment} |

: {tbl-colwidths="\[25,75\]"}

## Miscellany: assignment 

Let's make a tiny data frame to use as an example:

```{r}
df <- tibble(x = c(1, 2, 3, 4, 5), y = c("a", "a", "b", "c", "c"))
df
```

## Miscellany: assignment 

::: question
Suppose you run the following and **then** you inspect `df`, will the `x` variable have values 1, 2, 3, 4, 5 or 2, 4, 6, 8, 10?
:::

::: columns
::: column
```{r}
df |>
  mutate(x = x * 2)
```
:::

::: column

```{r}
#| eval: false
df
```
:::
:::

## Miscellany: assignment 

::: question
Suppose you run the following and **then** you inspect `df`, will the `x` variable have values 1, 2, 3, 4, 5 or 2, 4, 6, 8, 10?
:::

::: columns
::: column
```{r}
df |>
  mutate(x = x * 2)
```
:::

::: column

```{r}
df
```
:::
:::

. . .

> **Do something and show me**

## Recap: assignment 

::: question
Suppose you run the following and **then** you inspect `df`, will the `x` variable has values 1, 2, 3, 4, 5 or 2, 4, 6, 8, 10?
:::

::: columns
::: column
```{r}
df <- df |>
  mutate(x = x * 2)
```
:::

::: column

```{r}
#| eval: false
df
```
:::
:::

## Recap: assignment

::: question
Suppose you run the following and **then** you inspect `df`, will the `x` variable has values 1, 2, 3, 4, 5 or 2, 4, 6, 8, 10?
:::

::: columns
::: column
```{r}
df <- df |>
  mutate(x = x * 2)
```
:::

::: column

```{r}
df
```
:::
:::

. . .

> **Do something and save result**

## Recap: assignment {.smaller}

::: columns
::: {.column .fragment width="49%"}
> **Do something, save result, overwriting original**

```{r}
#| code-line-numbers: "5-7"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df <- df |>
  mutate(x = x * 2)
df
```
:::

::: {.column .fragment width="49%"}
> **Do something, save result, *not* overwriting original**

```{r}
#| code-line-numbers: "5-7"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df_new <- df |>
  mutate(x = x * 2)
df_new
```
:::
:::

## Recap: assignment {.smaller}

::: columns
::: {.column .fragment width="49%"}
> **Do something, save result, overwriting original *when you shouldn't***

```{r}
#| code-line-numbers: "5-8"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df <- df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
df
```
:::

::: {.column .fragment width="49%"}
> **Do something, save result, *not* overwriting original *when you shouldn't***

```{r}
#| code-line-numbers: "5-8"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df_summary <- df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
df_summary
```
:::
:::

## Recap: assignment {.smaller}

::: columns
::: {.column .fragment width="49%"}
> **Do something, save result, overwriting original**\
> ***data frame***

```{r}
#| code-line-numbers: "5-7"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df <- df |>
  mutate(z = x + 2)
df
```
:::

::: {.column .fragment width="49%"}
> **Do something, save result, overwriting original**\
> ***column***

```{r}
#| code-line-numbers: "5-7"

df <- tibble(
  x = c(1, 2, 3, 4, 5), 
  y = c("a", "a", "b", "c", "c")
)
df <- df |>
  mutate(x = x + 2)
df
```
:::
:::

# Data tidying

## Tidy data

> "Tidy datasets are easy to manipulate, model and visualise, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table."
>
> Tidy Data, <https://vita.had.co.nz/papers/tidy-data.pdf>

. . .

**Note:** "easy to manipulate" = "straightforward to manipulate"

## Goal

Visualize StatSci majors over the years!

![](images/06/statsci-majors.png)

## Data {.smaller}

```{r}
statsci <- read_csv("data/statsci.csv")
statsci
```

-   The first column (variable) is the `degree`, and there are 4 possible degrees: BS (Bachelor of Science), BS2 (Bachelor of Science, 2nd major), AB (Bachelor of Arts), AB2 (Bachelor of Arts, 2nd major).

-   The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2024.

## Let's plan! {.smaller .nostretch}

In a perfect world, how would our data be formatted to create this plot? What do the columns need to be? What would go inside `aes` when we call `ggplot`?

![](images/06/statsci-majors.png)

## The goal

We want to be able to write code that starts something like this:

```{r}
#| eval: false 
ggplot(statsci, aes(x = year, y = n, color = degree_type)) + 
  ...
```

But the data are not in a format that will allow us to do that.

## The challenge {.smaller .scrollable}

::: columns
::: {.column .fragment width="69%"}

> How do we go from this...

```{r}
#| echo: false

statsci |>
  separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
  ) |>
  select(degree, `2011`, `2012`, `2013`, `2014`, `2015`, `2016`, `2017`)
```
:::

::: {.column .fragment width="29%"}

> ...to this?

```{r}
#| echo: false

statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  mutate(n = if_else(is.na(n), 0, n)) |>
  separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
  ) |>
  select(degree_type, year, n) |>
  print(n = 16)
```
:::
:::

. . .

With the command `pivot_longer()`!

## `{r} todays_ae`

::: appex
-   Go to your ae project in RStudio.

-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   If you haven't yet done so, click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.
:::

## Recap: pivoting {.smaller}

::: incremental
-   Data sets can't be labeled as *wide* or *long* but they can be made *wider* or *longer* for a certain analysis that requires a certain format
-   When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.
-   You can tweak a plot forever, but at some point the tweaks are likely not very productive. However, you should always be critical of defaults (however pretty they might be) and see if you can improve the plot to better portray your data / results / what you want to communicate.
:::

## {.scrollable .medium}

```{r}
#| eval: false
statsci_longer <- statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  mutate(n = if_else(is.na(n), 0, n)) |>
  separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
  )
```
