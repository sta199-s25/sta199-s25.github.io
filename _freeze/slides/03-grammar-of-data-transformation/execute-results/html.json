{
  "hash": "1a519e806a9b1f84c7357f594c12477a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Grammar of data transformation\"\nsubtitle: \"Lecture 3\"\ndate: \"2025-01-21\"\nformat: revealjs\nauto-stretch: false\n---\n\n\n\n\n\n# Now, where was I?\n\n## Alison Bechdel\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/03/alison.png){fig-align=\"center\" width=\"80%\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/03/fun_home.jpg){fig-align=\"center\" width=\"80%\"}\n:::\n:::\n\n## The Bechdel Test\n\n::: columns\n::: {.column width=\"72%\"}\n![](images/03/bechdel.png){fig-align=\"center\"} (*Dykes to Watch Out For* - 1985)\n:::\n\n::: {.column width=\"28%\"}\nFilm passes if...\n\n1.  two female characters;\n2.  talk to each other;\n3.  about something besides a man.\n:::\n:::\n\n## Do JZ's favorite movies pass?\n\n|                                         |     |\n|-----------------------------------------|-----|\n| *Double Indemnity* (1944)               | 🥴  |\n| *Sunset Boulevard* (1950)               | 🥴  |\n| *Sweet Smell of Success* (1957)         | ❌  |\n| *One Hundred and One Dalmatians* (1961) | ✅  |\n| *Chinatown* (1974)                      | ❌  |\n| *Amadeus* (1984)                        | ❌  |\n| *Goodfellas* (1990)                     | 🥴  |\n| *Bram Stoker's Dracula* (1992)          | ❌  |\n| *The Lord of the Rings* (2001 - 2003)   | ❌  |\n| *Vera Drake* (2004)                     | ✅  |\n\n## Our starting point\n\n::: callout-note\n## From [FiveThirtyEight](https://fivethirtyeight.com/features/the-dollar-and-cents-case-against-hollywoods-exclusion-of-women/)\n\n![](images/03/five_thirty_eight.png){fig-align=\"center\" width=\"85%\"}\n:::\n\n\"We did a statistical analysis of films to test two claims: first, that films that pass the Bechdel test — featuring women in stronger roles — see a lower return on investment, and second, that they see lower gross profits. We found no evidence to support either claim.\"\n\n## `ae-02-bechdel-dataviz`\n\n::: appex\nGo to RStudio, confirm that you're in the `ae` project, and open the document ae-02-bechdel-dataviz`.qmd`.\n:::\n\n## Recap: Code cells (aka code chunks) {.smaller}\n\n![](images/03/code-cell.png) . . .\n\n-   Cell `label`s are helpful for describing what the code is doing, for jumping between code cells in the editor, and for troubleshooting\n\n-   `message: false` hides any messages emitted by the code in your rendered document\n\n# Describing distributions and relationships\n\n## Talking about one numerical variable\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03-grammar-of-data-transformation_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03-grammar-of-data-transformation_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n:::\n:::\n\n- **center**: what is the \"typical\" value (mean, median, mode) the data are concentrating around?\n- **spread**: how concentrated are the data around a typical value?\n- **shape**: does the distribution have one peak, or many? is it symmetric or skewed?\n\n## Interaction between shape and center\n\n![](images/03/mean_median_mode.png)\n\n## Histograms provide more detail...\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03-grammar-of-data-transformation_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03-grammar-of-data-transformation_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n:::\n:::\n\n\n## ...but boxplots are nice for side-by-side comparisons\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-grammar-of-data-transformation_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Talking about two numerical variables\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-grammar-of-data-transformation_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=864}\n:::\n:::\n\n\n\n- **direction**: positive or negative\n- **shape**: linear or nonlinear\n- **strength**: how close are points to the \"trend\"\n\n## Strength and direction of linear relationships\n\n![](images/03/corr-example.png)\n\n## Nonlinear relationships\n\n![](images/02/un-data-viz.png)\n\n# Data transformation\n\n## A quick reminder {.smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |> # <1>\n  filter(roi > 400) |> # <2>\n  select(title, roi, budget_2013, gross_2013, year, clean_test) # <3>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  title                     roi budget_2013 gross_2013  year clean_test\n  <chr>                   <dbl>       <dbl>      <dbl> <dbl> <chr>     \n1 Paranormal Activity      671.      505595  339424558  2007 dubious   \n2 The Blair Witch Project  648.      839077  543776715  1999 ok        \n3 El Mariachi              583.       11622    6778946  1992 nowomen   \n```\n\n\n:::\n:::\n\n\n\n1.  Start with the `bechdel` data frame\n2.  Filter for movies with `roi` greater than 400 (gross is more than 400 times budget)\n3.  Select the columns `title`, `roi`, `budget_2013`, `gross_2013`, `year`, and `clean_test`\n\n## The pipe `|>` {.smaller}\n\nThe pipe operator passes what comes before it into the function that comes after it as the first argument in that function.\n\n::: columns\n::: {.column .fragment width=\"55%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"45%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 |> \n  sum(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n<br>\n\n::: columns\n::: {.column .fragment width=\"55%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(filter(bechdel, roi > 400), title)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n  title                  \n  <chr>                  \n1 Paranormal Activity    \n2 The Blair Witch Project\n3 El Mariachi            \n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"45%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  filter(roi > 400) |>\n  select(title)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n  title                  \n  <chr>                  \n1 Paranormal Activity    \n2 The Blair Witch Project\n3 El Mariachi            \n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## Code style tip {{< fa lightbulb >}} {.smaller}\n\n-   In data transformation pipelines, always use a\n    -   space before `|>`\n    -   line break after `|>`\n    -   indent the next line of code\n\n. . .\n\n-   In data visualization layers, always use a\n    -   space before `+`\n    -   line break after `+`\n    -   indent the next line of code\n\n## The pipe, in action {.smaller}\n\n::: task\nFind movies that pass the Bechdel test and display their titles and ROIs in descending order of ROI.\n:::\n\n. . .\n\nStart with the `bechdel` data frame:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,615 × 7\n   title                   year gross_2013 budget_2013    roi binary clean_test\n   <chr>                  <dbl>      <dbl>       <dbl>  <dbl> <chr>  <chr>     \n 1 21 & Over               2013   67878146    13000000  5.22  FAIL   notalk    \n 2 Dredd 3D                2012   55078343    45658735  1.21  PASS   ok        \n 3 12 Years a Slave        2013  211714070    20000000 10.6   FAIL   notalk    \n 4 2 Guns                  2013  208105475    61000000  3.41  FAIL   notalk    \n 5 42                      2013  190040426    40000000  4.75  FAIL   men       \n 6 47 Ronin                2013  184166317   225000000  0.819 FAIL   men       \n 7 A Good Day to Die Hard  2013  371598396    92000000  4.04  FAIL   notalk    \n 8 About Time              2013  102648667    12000000  8.55  PASS   ok        \n 9 Admission               2013   36014634    13000000  2.77  PASS   ok        \n10 After Earth             2013  304895295   130000000  2.35  FAIL   notalk    \n# ℹ 1,605 more rows\n```\n\n\n:::\n:::\n\n\n\n## The pipe, in action {.smaller}\n\n::: task\nFind movies that pass the Bechdel test and display their titles and ROIs in descending order of ROI.\n:::\n\nFilter for rows where `binary` is equal to `\"PASS\"`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  filter(binary == \"PASS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 753 × 7\n   title                 year gross_2013 budget_2013   roi binary clean_test\n   <chr>                <dbl>      <dbl>       <dbl> <dbl> <chr>  <chr>     \n 1 Dredd 3D              2012   55078343    45658735  1.21 PASS   ok        \n 2 About Time            2013  102648667    12000000  8.55 PASS   ok        \n 3 Admission             2013   36014634    13000000  2.77 PASS   ok        \n 4 American Hustle       2013  397915817    40000000  9.95 PASS   ok        \n 5 August: Osage County  2013   87609748    25000000  3.50 PASS   ok        \n 6 Beautiful Creatures   2013   75392809    50000000  1.51 PASS   ok        \n 7 Blue Jasmine          2013  101793664    18000000  5.66 PASS   ok        \n 8 Carrie                2013  120268278    30000000  4.01 PASS   ok        \n 9 Despicable Me 2       2013 1338831390    76000000 17.6  PASS   ok        \n10 Elysium               2013  379242208   120000000  3.16 PASS   ok        \n# ℹ 743 more rows\n```\n\n\n:::\n:::\n\n\n\n## The pipe, in action {.smaller}\n\n::: task\nFind movies that pass the Bechdel test and display their titles and ROIs in descending order of ROI.\n:::\n\nArrange the rows in `desc`ending order of `roi`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  filter(binary == \"PASS\") |>\n  arrange(desc(roi))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 753 × 7\n   title                     year gross_2013 budget_2013   roi binary clean_test\n   <chr>                    <dbl>      <dbl>       <dbl> <dbl> <chr>  <chr>     \n 1 The Blair Witch Project   1999  543776715      839077 648.  PASS   ok        \n 2 The Devil Inside          2012  157289709     1014639 155.  PASS   ok        \n 3 My Big Fat Greek Wedding  2002  768922942     6475896 119.  PASS   ok        \n 4 Chasing Amy               1997   39417963      362810 109.  PASS   ok        \n 5 Slacker                   1991    4200140       39349 107.  PASS   ok        \n 6 Insidious                 2010  164379554     1602348 103.  PASS   ok        \n 7 Paranormal Activity 2     2010  280159759     3204696  87.4 PASS   ok        \n 8 Paranormal Activity 3     2011  322170936     5178454  62.2 PASS   ok        \n 9 The Last Exorcism         2010  118787648     1922817  61.8 PASS   ok        \n10 Cinderella                1997  246710482     4208591  58.6 PASS   ok        \n# ℹ 743 more rows\n```\n\n\n:::\n:::\n\n\n\n## The pipe, in action {.smaller}\n\n::: task\nFind movies that pass the Bechdel test and display their titles and ROIs in descending order of ROI.\n:::\n\nSelect columns `title` and `roi`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbechdel |>\n  filter(binary == \"PASS\") |>\n  arrange(desc(roi)) |>\n  select(title, roi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 753 × 2\n   title                      roi\n   <chr>                    <dbl>\n 1 The Blair Witch Project  648. \n 2 The Devil Inside         155. \n 3 My Big Fat Greek Wedding 119. \n 4 Chasing Amy              109. \n 5 Slacker                  107. \n 6 Insidious                103. \n 7 Paranormal Activity 2     87.4\n 8 Paranormal Activity 3     62.2\n 9 The Last Exorcism         61.8\n10 Cinderella                58.6\n# ℹ 743 more rows\n```\n\n\n:::\n:::\n\n\n\n## In this class, you will...\n\n::: columns\n::: {.column width=\"35%\"}\nBuild cakes (`ggplot`) ![](images/03/cake.jpg)\n:::\n\n::: {.column width=\"65%\"}\nStack dolls (pipe `|>`) ![](images/03/matryoshka.jpg)\n:::\n:::\n\nMaster these constructs, and everything will be coming up roses!\n",
    "supporting": [
      "03-grammar-of-data-transformation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}