{
  "hash": "ce6b3d0fdc5b1ff28c80d44b58b1ce60",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data types and classes\"\nsubtitle: \"Lecture 8\"\ndate: \"2025-02-06\"\nformat: revealjs\nauto-stretch: false\n---\n\n\n\n<!-- begin: ae definition -->\n\n\n\n\n\n\n\n<!-- end: ae definition -->\n\n# Warm-up\n\n## While you wait... {.smaller}\n\n::: columns\n::: {.column width=\"35%\"}\n\n\n{{< qrcode https://forms.gle/wgMtTHbAynjiX2bp6 >}}\n\n\n\n\n<iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSf0x7gOZY04c9vzdyIdm-v_vCqL0oFaQI9-LWB8Dt3uf3TriQ/viewform?embedded=true\" width=\"350\" height=\"400\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">\n\nLoading…\n\n</iframe>\n:::\n\n::: {.column width=\"65%\"}\nPrepare for today's application exercise: **ae\\-07\\-durham\\-climate\\-factors**\n\n::: appex\n-   Go to your `ae` project in RStudio.\n\n-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   Click Pull to get today's application exercise file: *ae\\-07\\-durham\\-climate\\-factors\\.qmd*.\n\n-   Wait till the you're prompted to work on the application exercise during class before editing the file.\n:::\n:::\n:::\n\n## Regrade request policy {.smaller}\n\n::: incremental\n-   Considered for errors in grade calculation or if a correct answer was mistakenly marked as incorrect\n\n-   Not a mechanism for:\n\n    -   disputing the number of points deducted for an incorrect response\n    -   asking for clarification on feedback (come to office hours instead)\n\n-   Due on Gradescope within a week after an assignment is returned\n\n-   The entire assignment may be regraded, which could result in an adjustment in either direction\n\n-   No regrade requests after the final exam has been administered\n:::\n\n# Data types\n\n## How many classes do you have on Tuesdays?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 209 × 3\n   Timestamp         How many classes do you have on Tues…¹ `What year are you?`\n   <chr>             <chr>                                  <chr>               \n 1 2/6/2025 11:33:57 3                                      Sophomore           \n 2 2/6/2025 11:37:39 3                                      First-year          \n 3 2/6/2025 11:40:55 2                                      Senior              \n 4 2/6/2025 11:42:05 3                                      First-year          \n 5 2/6/2025 11:42:46 3                                      Senior              \n 6 2/6/2025 11:43:28 3                                      Senior              \n 7 2/6/2025 11:44:41 3                                      First-year          \n 8 2/6/2025 11:44:49 3                                      First-year          \n 9 2/6/2025 11:44:51 2                                      Sophomore           \n10 2/6/2025 11:44:51 3                                      Sophomore           \n# ℹ 199 more rows\n# ℹ abbreviated name: ¹​`How many classes do you have on Tuesdays?`\n```\n\n\n:::\n:::\n\n\n\n## `rename()` variables\n\nTo make them easier to work with...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey <- survey |>\n  rename(\n    tue_classes = `How many classes do you have on Tuesdays?`,\n    year = `What year are you?`\n  )\n```\n:::\n\n\n\n## Variable types\n\n::: question\nWhat type of variable is `tue_classes`?\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 209 × 3\n   Timestamp         tue_classes year      \n   <chr>             <chr>       <chr>     \n 1 2/6/2025 11:33:57 3           Sophomore \n 2 2/6/2025 11:37:39 3           First-year\n 3 2/6/2025 11:40:55 2           Senior    \n 4 2/6/2025 11:42:05 3           First-year\n 5 2/6/2025 11:42:46 3           Senior    \n 6 2/6/2025 11:43:28 3           Senior    \n 7 2/6/2025 11:44:41 3           First-year\n 8 2/6/2025 11:44:49 3           First-year\n 9 2/6/2025 11:44:51 2           Sophomore \n10 2/6/2025 11:44:51 3           Sophomore \n# ℹ 199 more rows\n```\n\n\n:::\n:::\n\n\n\n## Variable types\n\n::: question\nWhy isn't the tue_classes column numeric?\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey |>\n  count(tue_classes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 2\n   tue_classes                  n\n   <chr>                    <int>\n 1 1                           10\n 2 2                           53\n 3 2 -3                         1\n 4 3                          104\n 5 3 classes                    1\n 6 4                           28\n 7 5                            3\n 8 Four                         1\n 9 TWO MANY                     1\n10 Three                        2\n11 Two                          3\n12 Two plus a chemistry lab     1\n13 three                        1\n```\n\n\n:::\n:::\n\n\n\n## Let's clean it up {.scrollable}\n\nIt's a huge pain in the rear:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey <- survey |>\n  mutate(\n    tue_classes = case_when(\n      tue_classes == \"2 -3\" ~ \"3\",\n      tue_classes == \"3 classes\" ~ \"3\",\n      tue_classes == \"Four\" ~ \"4\",\n      tue_classes == \"TWO MANY\" ~ \"2\",\n      tue_classes == \"Three\" ~ \"3\",\n      tue_classes == \"Two\" ~ \"2\",\n      tue_classes == \"Two plus a chemistry lab\" ~ \"3\",\n      tue_classes == \"three\" ~ \"3\",\n      .default = tue_classes\n    ),\n    tue_classes = as.numeric(tue_classes)\n  )\n\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 209 × 3\n   Timestamp         tue_classes year      \n   <chr>                   <dbl> <chr>     \n 1 2/6/2025 11:33:57           3 Sophomore \n 2 2/6/2025 11:37:39           3 First-year\n 3 2/6/2025 11:40:55           2 Senior    \n 4 2/6/2025 11:42:05           3 First-year\n 5 2/6/2025 11:42:46           3 Senior    \n 6 2/6/2025 11:43:28           3 Senior    \n 7 2/6/2025 11:44:41           3 First-year\n 8 2/6/2025 11:44:49           3 First-year\n 9 2/6/2025 11:44:51           2 Sophomore \n10 2/6/2025 11:44:51           3 Sophomore \n# ℹ 199 more rows\n```\n\n\n:::\n:::\n\n\n\n# Data types\n\n## Data types in R\n\n-   **logical**\n-   **double**\n-   **integer**\n-   **character**\n-   and some more, but we won't be focusing on those\n\n## Logical & character\n\n::: columns\n::: {.column width=\"49%\"}\n**logical** - Boolean values `TRUE` and `FALSE`\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"49%\"}\n**character** - character strings\n\n<br> <br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(\"First-year\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## Double & integer\n\n::: columns\n::: {.column width=\"49%\"}\n**double** - floating point numerical values (default numerical type)\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(2.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"49%\"}\n**integer** - integer numerical values (indicated with an `L`)\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## Concatenation {.smaller}\n\nVectors can be constructed using the `c()` function.\n\n-   Numeric vector:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n. . .\n\n-   Character vector:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"Hello\", \"World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello\"  \"World!\"\n```\n\n\n:::\n:::\n\n\n\n. . .\n\n-   Vector made of vectors:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(c(\"hi\", \"hello\"), c(\"bye\", \"jello\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hi\"    \"hello\" \"bye\"   \"jello\"\n```\n\n\n:::\n:::\n\n\n\n## Converting between types\n\n::: hand\nwith intention...\n:::\n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:3\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- as.character(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\" \"2\" \"3\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## Converting between types\n\n::: hand\nwith intention...\n:::\n\n::: columns\n::: {.column width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment width=\"49%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- as.numeric(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## Converting between types\n\n::: hand\nwithout intention...\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2, \"Just this one!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2\"              \"Just this one!\"\n```\n\n\n:::\n:::\n\n\n\n. . .\n\nR will happily convert between various types without complaint when different types of data are concatenated in a vector, and that's not always a great thing!\n\n## Converting between types\n\n::: hand\nwithout intention...\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(FALSE, 3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 3\n```\n\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1.2, 3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.2 3.0\n```\n\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2L, \"two\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2\"   \"two\"\n```\n\n\n:::\n:::\n\n\n\n## Explicit vs. implicit coercion\n\n::: columns\n::: {.column width=\"49%\"}\n**Explicit coercion:**\n\nWhen you call a function like `as.logical()`, `as.numeric()`, `as.integer()`, `as.double()`, or `as.character()`.\n:::\n\n::: {.column .fragment width=\"49%\"}\n**Implicit coercion:**\n\nHappens when you use a vector in a specific context that expects a certain type of vector.\n:::\n:::\n\n# Data classes\n\n## Data classes {.smaller}\n\n::: incremental\n-   Vectors are like Lego building blocks\n-   We stick them together to build more complicated constructs, e.g. *representations of data*\n-   The **class** attribute relates to the S3 class of an object which determines its behaviour\n    -   You don't need to worry about what S3 classes really mean, but you can read more about it [here](https://adv-r.hadley.nz/s3.html#s3-classes) if you're curious\n-   Examples: factors, dates, and data frames\n:::\n\n## Factors {.smaller}\n\nR uses factors to handle categorical variables, variables that have a fixed and known set of possible values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_years <- factor(\n  c(\n    \"First-year\", \"Sophomore\", \"Sophomore\", \"Senior\", \"Junior\"\n    )\n  )\nclass_years\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] First-year Sophomore  Sophomore  Senior     Junior    \nLevels: First-year Junior Senior Sophomore\n```\n\n\n:::\n:::\n\n\n\n::: columns\n::: {.column .fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## More on factors\n\nWe can think of factors like character (level labels) and an integer (level numbers) glued together\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 4 levels \"First-year\",\"Junior\",..: 1 4 4 3 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 4 4 3 2\n```\n\n\n:::\n:::\n\n\n\n## Dates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoday <- as.Date(\"2024-09-24\")\ntoday\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-09-24\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n\n\n## More on dates\n\nWe can think of dates like an integer (the number of days since the origin, 1 Jan 1970) and an integer (the origin) glued together\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19990\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(today) / 365 # roughly 55 yrs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 54.76712\n```\n\n\n:::\n:::\n\n\n\n## Data frames\n\nWe can think of data frames like like vectors of equal length glued together\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(x = 1:2, y = 3:4)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y\n1 1 3\n2 2 4\n```\n\n\n:::\n:::\n\n\n\n::: columns\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## Lists {.smaller}\n\nLists are a generic vector container; vectors of any type can go in them\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4\"}\nl <- list(\n  x = 1:4,\n  y = c(\"hi\", \"hello\", \"jello\"),\n  z = c(TRUE, FALSE)\n)\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x\n[1] 1 2 3 4\n\n$y\n[1] \"hi\"    \"hello\" \"jello\"\n\n$z\n[1]  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n\n## Lists and data frames {.smaller}\n\n-   A data frame is a special list containing vectors of equal length\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y\n1 1 3\n2 2 4\n```\n\n\n:::\n:::\n\n\n\n-   When we use the `pull()` function, we extract a vector from the data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  pull(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4\n```\n\n\n:::\n:::\n\n\n\n# Working with factors\n\n## Read data in as character strings\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 209 × 3\n   Timestamp         tue_classes year      \n   <chr>                   <dbl> <chr>     \n 1 2/6/2025 11:33:57           3 Sophomore \n 2 2/6/2025 11:37:39           3 First-year\n 3 2/6/2025 11:40:55           2 Senior    \n 4 2/6/2025 11:42:05           3 First-year\n 5 2/6/2025 11:42:46           3 Senior    \n 6 2/6/2025 11:43:28           3 Senior    \n 7 2/6/2025 11:44:41           3 First-year\n 8 2/6/2025 11:44:49           3 First-year\n 9 2/6/2025 11:44:51           2 Sophomore \n10 2/6/2025 11:44:51           3 Sophomore \n# ℹ 199 more rows\n```\n\n\n:::\n:::\n\n\n\n## But coerce when plotting\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey, mapping = aes(x = year)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](08-data-types-classes_files/figure-revealjs/unnamed-chunk-40-1.png){width=100%}\n:::\n:::\n\n\n\n## Use forcats to reorder levels {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey |>\n  mutate(\n    year = fct_relevel(year, \"First-year\", \"Sophomore\", \"Junior\", \"Senior\")\n  ) |>\n  ggplot(mapping = aes(x = year)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](08-data-types-classes_files/figure-revealjs/unnamed-chunk-41-1.png){width=100%}\n:::\n:::\n\n\n\n## A peek into forcats {.smaller}\n\nReordering levels by:\n\n-   `fct_relevel()`: hand\n\n-   `fct_infreq()`: frequency\n\n-   `fct_reorder()`: sorting along another variable\n\n-   `fct_rev()`: reversing\n\n...\n\n. . .\n\nChanging level values by:\n\n-   `fct_lump()`: lumping uncommon levels together into \"other\"\n\n-   `fct_other()`: manually replacing some levels with \"other\"\n\n...\n",
    "supporting": [
      "08-data-types-classes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}