{
  "hash": "fdba7bbf7384d8c3e3cd73f069f6966b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The language of models\"\nsubtitle: \"Lecture 12\"\ndate: \"2025-02-27\"\nformat: revealjs\nauto-stretch: false\n---\n\n::: {.cell}\n\n:::\n\n\n# You people are cute...\n\n## We can dream\n\n![](images/12/sta199-cute-1.png){fig-align=\"center\"}\n\n## Anyone want to argue?\n\n![](images/12/sta199-cute-2.png){fig-align=\"center\"}\n\n## Nailed it\n\n![](images/12/sta199-cute-3.png){fig-align=\"center\"}\n\n## Work on the ears please\n\n![](images/12/sta199-cute-4.png){fig-align=\"center\"}\n\n## Staaahp\n\n![](images/12/sta199-cute-5.png){fig-align=\"center\"}\n\n## No\n\n![](images/12/sta199-cute-6.png){fig-align=\"center\"}\n\n# ...and also ugly\n\n## Third place {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = wt, y = mpg, shape = factor(vs), color = factor(vs))) +\n  geom_point(size = 10, stroke = 5, alpha = 0.5) + \n  geom_smooth(size = 5) +\n  labs(\n    x = \"WEIGHT (1000 LBS)!!!IN OUNCES!!!?;)))\",\n    y = \"MPG?????? (MeTeRs pER gALLoN)!\",\n    title = \"~~~Weight vs MPG vs Engine Type of CARS!!!!><%&#!~~~\",\n    shape = \"ugly engine type :(\",\n    color = \"Engine Thingy\"\n  ) +\n  scale_shape_manual(\n    values = c(0, 15),  \n    labels = c(\"V-SHAPED?!\", \"STRAIGHT??!!\")\n  ) +\n  scale_color_manual(\n    values = c(\"hotpink\", \"limegreen\"),\n    labels = c(\"HONK HONK\", \"BEEP BEEP\")\n  ) +\n    annotate(\"text\", x = 3, y = 25, label = \"VROOOOOOOMM!!!M!!!!!!!!!!!!!!\", \n             color = \"red\", size = 10, angle = 34) +\n  theme(\n       legend.position = \"bottom\",\n       legend.background = element_rect(fill = \"yellow\", color = \"red\"))\n```\n\n::: {.cell-output-display}\n![](12-language-models_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n## Second place {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_mtcars <- mtcars |>\n  mutate(\n    am = as.character(am),\n    vs = as.character(vs)\n  )\nggplot(new_mtcars, aes(x = wt,\n                       y = mpg,\n                       shape = vs,\n                       linewidth = 69,\n                       label = \"i love john zito\"\n                       )\n  ) +\n  xlim(-1.1231, 5.384781472) +\n  ylim(-5.128312, 49.172836) +\n  geom_point(color = \"green3\") +\n  geom_line(color = \"pink3\") +\n  geom_area(color = \"brown4\") +\n  geom_quantile(linewidth = 2, color = \"yellow4\") +\n  geom_text(\n    size = new_mtcars$wt,\n    angle = new_mtcars$disp,\n    color = new_mtcars$hp\n  ) +\n  labs(\n    x = \"Weight (1000 lbs)\",\n    y = \"Miles / gallon\",\n  ) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](12-language-models_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## First place {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimg <- readJPEG(\"images/12/images.jpeg\")\n\nfixed_mtcars <- mtcars |>\n  mutate(\n    am = factor(am, labels = c(\"Automatic\", \"Manual\")),\n    am = fct_relevel(am, \"Manual\", \"Automatic\"),\n    vs = factor(vs, labels = c(\"V-shaped\", \"Straight\")),\n    signs_m = ifelse(vs == \"V-shaped\", \"■ ■ ■\", \"■ ■ ■\")\n  )\n\nggplot(fixed_mtcars, aes(x = wt, y = mpg, color = am)) +\n  annotation_raster(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +\n  geom_text(aes(label = signs_m), size = 15) +\n  labs(\n    title = \"1v1 car weight and fuel efficiency\n    for various smurfmobiles\",\n    x = \"Weight (in mushroom houses)\",\n    y = \"Gallons (milk)\",\n    color = \"Transmission\"\n  ) +\n  scale_color_manual(\n    values = c(\"Automatic\" = \"blue\", \"Manual\" = \"blue\")\n  )  +\n  theme(\n    legend.position = \"top\",\n    plot.background = element_rect(fill = \"transparent\", color = NA),\n    text = element_text(size = 50, color = \"blue\")\n  )\n```\n\n::: {.cell-output-display}\n![](12-language-models_files/figure-revealjs/unnamed-chunk-4-1.png){width=1920}\n:::\n:::\n",
    "supporting": [
      "12-language-models_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}