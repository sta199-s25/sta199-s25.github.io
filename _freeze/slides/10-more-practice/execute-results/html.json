{
  "hash": "e4ff9341d860c15bccee9df786fe5b21",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"More practice\"\nsubtitle: \"Lecture 10\"\ndate: \"2025-02-13\"\nformat: revealjs\nauto-stretch: false\n---\n\n\n\n<!-- begin: ae definition -->\n\n\n\n\n\n\n\n<!-- end: ae definition -->\n\n# Before we begin...\n\n## Midterm Exam 1 {.small}\n\n-   **In-class** (70%)\n\n    -   Thursday February 20 11:45 AM - 1:00 PM;\n    -   All multiple choice;\n    -   You should have gotten an email about room assignment;\n    -   8.5\" x 11\" cheat sheet.\n\n-   **Take-home** (30%)\n\n    -   Released Thursday February 20 at 1:00 PM;\n    -   Due Monday February 24 at 8:30 AM.\n    -   Basically a mini lab;\n    -   Open resource (citation policies apply);\n    -   **No collaboration.**\n\nSee [slides from 2/11](https://sta199-s25.github.io/slides/09-importing-recoding-data.html#/that-pesky-midterm) for more details.\n\n## Code smell {.small}\n\n> One way to look at smells is with respect to principles and quality: \"Smells are certain structures in the code that indicate violation of fundamental design principles and negatively impact design quality\". Code smells are usually not bugs; they are not technically incorrect and do not prevent the program from functioning. Instead, they indicate weaknesses in design that may slow down development or increase the risk of bugs or failures in the future.\n\n![](images/10/spongebob-stink.gif){width=\"319\" fig-align=\"center\"} ![](images/10/horribly-ugly.gif){fig-align=\"center\"} ![](images/10/look-at-me.gif){width=\"319\" fig-align=\"center\"}\n\n::: aside\nSource: [Code smell on Wikipedia](https://en.wikipedia.org/wiki/Code_smell)\n:::\n\n\n## Code style\n\nFollow the [Tidyverse style guide](https://style.tidyverse.org/):\n\n-   Spaces before and line breaks after each `+` when building a ggplot\n\n-   Spaces before and line breaks after each `|>` in a data transformation pipeline,\n\n-   Proper indentation\n\n-   Spaces around `=` signs and spaces after commas\n\n-   Lines should not span more than 80 characters, long lines should be broken up with each argument on its own line\n\n# FAQ\n\n## Quotes VS no quotes VS backticks\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  x = c(-2, -0.5, 0.5, 1, 2),\n  `2011` = c(-2, -0.5, 0.5, 1, 2)\n)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x `2011`\n  <dbl>  <dbl>\n1  -2     -2  \n2  -0.5   -0.5\n3   0.5    0.5\n4   1      1  \n5   2      2  \n```\n\n\n:::\n:::\n\n\n\n## Quotes VS no quotes VS backticks {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  x = c(-2, -0.5, 0.5, 1, 2),\n  `2011` = c(-2, -0.5, 0.5, 1, 2)\n)\n```\n:::\n\n\n\nReferencing a column in a pipeline:\n\n::: columns\n::: {.column .fragment width=\"33%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  filter(\"x\" > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x `2011`\n  <dbl>  <dbl>\n1  -2     -2  \n2  -0.5   -0.5\n3   0.5    0.5\n4   1      1  \n5   2      2  \n```\n\n\n:::\n:::\n\n\n`\"x\"` means the literal character string.\n:::\n\n::: {.column .fragment width=\"31%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  filter(x > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x `2011`\n  <dbl>  <dbl>\n1   0.5    0.5\n2   1      1  \n3   2      2  \n```\n\n\n:::\n:::\n\n\n`x` means the column name in `df`.\n:::\n\n\n::: {.column .fragment width=\"33%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  filter(`x` > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x `2011`\n  <dbl>  <dbl>\n1   0.5    0.5\n2   1      1  \n3   2      2  \n```\n\n\n:::\n:::\n\n\n``` `x` ``` also means the column name in `df`.\n:::\n\n:::\n\n## Quotes VS no quotes VS backticks {.medium}\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  x = c(-2, -0.5, 0.5, 1, 2),\n  `2011` = c(-2, -0.5, 0.5, 1, 2)\n)\n```\n:::\n\nReferencing a column in a pipeline:\n\n::: columns\n::: {.column .fragment width=\"33%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  filter(\"2011\" > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x `2011`\n  <dbl>  <dbl>\n1  -2     -2  \n2  -0.5   -0.5\n3   0.5    0.5\n4   1      1  \n5   2      2  \n```\n\n\n:::\n:::\n\n\n`\"2011\"` means the literal character string.\n:::\n\n::: {.column .fragment width=\"31%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  filter(2011 > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x `2011`\n  <dbl>  <dbl>\n1  -2     -2  \n2  -0.5   -0.5\n3   0.5    0.5\n4   1      1  \n5   2      2  \n```\n\n\n:::\n:::\n\n\n`2011` means the literal number.\n:::\n\n::: {.column .fragment width=\"33%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  filter(`2011` > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x `2011`\n  <dbl>  <dbl>\n1   0.5    0.5\n2   1      1  \n3   2      2  \n```\n\n\n:::\n:::\n\n\n``` `2011` ``` means the column name in `df`.\n:::\n\n:::\n\n\n## Why `%in%` instead of `==`?\n\n. . .\n\nConsider adding a `season` column:\n\n::: {.cell}\n\n```{.r .cell-code}\ndurham_climate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   month     avg_high_f avg_low_f precipitation_in\n   <chr>          <dbl>     <dbl>            <dbl>\n 1 January           49        28             4.45\n 2 February          53        29             3.7 \n 3 March             62        37             4.69\n 4 April             71        46             3.43\n 5 May               79        56             4.61\n 6 June              85        65             4.02\n 7 July              89        70             3.94\n 8 August            87        68             4.37\n 9 September         81        60             4.37\n10 October           71        47             3.7 \n11 November          62        37             3.39\n12 December          53        30             3.43\n```\n\n\n:::\n:::\n\n## Why `%in%` instead of `==`? {.scrollable}\n\nConsider adding a `season` column:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndurham_climate |>\n  mutate(\n    season = if_else(\n      month ????? c(\"December\", \"January\", \"February\"),\n      \"Winter\",\n      \"Not Winter\"\n    )\n  )\n```\n:::\n\n\n\n\n## Why `%in%` instead of `==`? {.scrollable}\n\nConsider adding a `season` column:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\ndurham_climate |>\n  mutate(\n    season = if_else(\n      month %in% c(\"December\", \"January\", \"February\"),\n      \"Winter\",\n      \"Not Winter\"\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 5\n   month     avg_high_f avg_low_f precipitation_in season    \n   <chr>          <dbl>     <dbl>            <dbl> <chr>     \n 1 January           49        28             4.45 Winter    \n 2 February          53        29             3.7  Winter    \n 3 March             62        37             4.69 Not Winter\n 4 April             71        46             3.43 Not Winter\n 5 May               79        56             4.61 Not Winter\n 6 June              85        65             4.02 Not Winter\n 7 July              89        70             3.94 Not Winter\n 8 August            87        68             4.37 Not Winter\n 9 September         81        60             4.37 Not Winter\n10 October           71        47             3.7  Not Winter\n11 November          62        37             3.39 Not Winter\n12 December          53        30             3.43 Winter    \n```\n\n\n:::\n:::\n\n\n\n## Why `%in%` instead of `==`? {.scrollable}\n\nConsider adding a `season` column:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\ndurham_climate |>\n  mutate(\n    season = if_else(\n      month == c(\"December\", \"January\", \"February\"),\n      \"Winter\",\n      \"Not Winter\"\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 5\n   month     avg_high_f avg_low_f precipitation_in season    \n   <chr>          <dbl>     <dbl>            <dbl> <chr>     \n 1 January           49        28             4.45 Not Winter\n 2 February          53        29             3.7  Not Winter\n 3 March             62        37             4.69 Not Winter\n 4 April             71        46             3.43 Not Winter\n 5 May               79        56             4.61 Not Winter\n 6 June              85        65             4.02 Not Winter\n 7 July              89        70             3.94 Not Winter\n 8 August            87        68             4.37 Not Winter\n 9 September         81        60             4.37 Not Winter\n10 October           71        47             3.7  Not Winter\n11 November          62        37             3.39 Not Winter\n12 December          53        30             3.43 Not Winter\n```\n\n\n:::\n:::\n\n\n\n## Why `%in%` instead of `==`?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"January\" == c(\"December\", \"January\", \"February\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"January\" %in% c(\"December\", \"January\", \"February\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n## Punchline\nInside `if_else` or `case_when` your condition needs to result in a single value of TRUE or FALSE for each row. If it results in multiple values of TRUE/FALSE (a *vector* of TRUE/FALSE), you will not necessarily get an error or even a warning, but unexpected things could happen.\n:::\n\n# Four tasks for today\n\n## Task 1: Prettifying the plot from ae-07 {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  durham_climate, \n  aes(x = month, y = avg_high_f, group = 1)\n  ) +\n  geom_line() +\n  geom_point(\n    shape = \"circle filled\", size = 4,\n    color = \"black\", fill = \"white\", stroke = 1\n  ) +\n  labs(\n    x = \"Month\",\n    y = \"Average high temperature (F)\",\n    title = \"Durham climate\"\n  ) + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](10-more-practice_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n\n## Things to change\n\n::: incremental \n1. Reorder the months chronologically;\n2. Fill the circles with season-specific colors;\n3. Add a legend for these colors to the *top* of the plot;\n4. Make sure the legend is ordered chronologically by season.\n:::\n\n## 0. Why `group = 1`? {.scrollable}\n\nWith it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nggplot(\n  durham_climate, \n  aes(x = month, y = avg_high_f, group = 1)\n  ) +\n  geom_line() +\n  geom_point(\n    shape = \"circle filled\", size = 4,\n    color = \"black\", fill = \"white\", stroke = 1\n  ) +\n  labs(\n    x = \"Month\",\n    y = \"Average high temperature (F)\",\n    title = \"Durham climate\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](10-more-practice_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n\n## 0. Why `group = 1`? {.scrollable}\n\nWithout it (even though I have `geom_line`!):\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3|5\"}\nggplot(\n  durham_climate, \n  aes(x = month, y = avg_high_f)\n  ) +\n  geom_line() +\n  geom_point(\n    shape = \"circle filled\", size = 4,\n    color = \"black\", fill = \"white\", stroke = 1\n  ) +\n  labs(\n    x = \"Month\",\n    y = \"Average high temperature (F)\",\n    title = \"Durham climate\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](10-more-practice_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n\n\n## 0. Why `group = 1`? {.scrollable}\n\nDon't need `group` for numerical vs numerical:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nggplot(\n  durham_climate, \n  aes(x = avg_low_f, y = avg_high_f)\n  ) +\n  geom_line() +\n  geom_point(\n    shape = \"circle filled\", size = 4,\n    color = \"black\", fill = \"white\", stroke = 1\n  ) +\n  labs(\n    x = \"Average low temperature (F)\",\n    y = \"Average high temperature (F)\",\n    title = \"Durham climate\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](10-more-practice_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n## 0. Why `group = 1`? {.scrollable}\n\nDo need `group` for categorical vs numerical:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nggplot(\n  durham_climate, \n  aes(x = month, y = avg_high_f, group = 1)\n  ) +\n  geom_line() +\n  geom_point(\n    shape = \"circle filled\", size = 4,\n    color = \"black\", fill = \"white\", stroke = 1\n  ) +\n  labs(\n    x = \"Month\",\n    y = \"Average high temperature (F)\",\n    title = \"Durham climate\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](10-more-practice_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n\n## 1. Reorder the months chronologically {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-4\"}\ndurham_climate |>\n  mutate(\n    month = fct_relevel(month, month.name)\n  ) |>\n  ggplot(\n    aes(x = month, y = avg_high_f, group = 1)\n  ) +\n  geom_line() +\n  geom_point(\n    shape = \"circle filled\", size = 4,\n    color = \"black\", fill = \"white\", stroke = 1\n  ) +\n  labs(\n    x = \"Month\",\n    y = \"Average high temperature (F)\",\n    title = \"Durham climate\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](10-more-practice_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n## 2. Fill the circles with season-specific colors {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-8|16|20-27\"}\ndurham_climate |>\n  mutate(\n    month = fct_relevel(month, month.name),\n    season = case_when(\n      month %in% c(\"December\", \"January\", \"February\") ~ \"Winter\",\n      month %in% c(\"March\", \"April\", \"May\") ~ \"Spring\",\n      month %in% c(\"June\", \"July\", \"August\") ~ \"Summer\",\n      month %in% c(\"September\", \"October\", \"November\") ~ \"Fall\",\n    )\n  ) |>\n  ggplot(\n    aes(x = month, y = avg_high_f, group = 1)\n    ) +\n  geom_line() +\n  geom_point(\n    aes(fill = season),\n    shape = \"circle filled\", size = 4,\n    color = \"black\", stroke = 1\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Winter\" = \"lightskyblue1\",\n      \"Spring\" = \"chartreuse3\",\n      \"Summer\" = \"gold2\",\n      \"Fall\" = \"lightsalmon4\"\n    )\n  ) + \n  labs(\n    x = \"Month\",\n    y = \"Average high temperature (F)\",\n    title = \"Durham climate\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](10-more-practice_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n## 3. Add legend for season to *top* of plot {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"34\"}\ndurham_climate |>\n  mutate(\n    month = fct_relevel(month, month.name),\n    season = case_when(\n      month %in% c(\"December\", \"January\", \"February\") ~ \"Winter\",\n      month %in% c(\"March\", \"April\", \"May\") ~ \"Spring\",\n      month %in% c(\"June\", \"July\", \"August\") ~ \"Summer\",\n      month %in% c(\"September\", \"October\", \"November\") ~ \"Fall\",\n    )\n  ) |>\n  ggplot(\n    aes(x = month, y = avg_high_f, group = 1)\n    ) +\n  geom_line() +\n  geom_point(\n    aes(fill = season),\n    shape = \"circle filled\", size = 4,\n    color = \"black\", stroke = 1\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Winter\" = \"lightskyblue1\",\n      \"Spring\" = \"chartreuse3\",\n      \"Summer\" = \"gold2\",\n      \"Fall\" = \"lightsalmon4\"\n    )\n  ) + \n  labs(\n    x = \"Month\",\n    y = \"Average high temperature (F)\",\n    title = \"Durham climate\"\n  ) +\n  theme_minimal() + \n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](10-more-practice_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n\n\n## 4. Order legend chronologically {.scrollable}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\ndurham_climate |>\n  mutate(\n    month = fct_relevel(month, month.name),\n    season = case_when(\n      month %in% c(\"December\", \"January\", \"February\") ~ \"Winter\",\n      month %in% c(\"March\", \"April\", \"May\") ~ \"Spring\",\n      month %in% c(\"June\", \"July\", \"August\") ~ \"Summer\",\n      month %in% c(\"September\", \"October\", \"November\") ~ \"Fall\",\n    ),\n    season = fct_relevel(season, \"Winter\", \"Spring\", \"Summer\", \"Fall\")\n  ) |>\n  ggplot(\n    aes(x = month, y = avg_high_f, group = 1)\n    ) +\n  geom_line() +\n  geom_point(\n    aes(fill = season),\n    shape = \"circle filled\", size = 4,\n    color = \"black\", stroke = 1\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Winter\" = \"lightskyblue1\",\n      \"Spring\" = \"chartreuse3\",\n      \"Summer\" = \"gold2\",\n      \"Fall\" = \"lightsalmon4\"\n    )\n  ) + \n  labs(\n    x = \"Month\",\n    y = \"Average high temperature (F)\",\n    title = \"Durham climate\"\n  ) +\n  theme_minimal() + \n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](10-more-practice_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n\n## Task 2: *pivot* to replicate this...\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](10-more-practice_files/figure-revealjs/unnamed-chunk-25-1.png){width=960}\n:::\n:::\n\n\n\nGive it a shot in your `ae-07-durham-climate-factors` file. And don't worry about prettification. Just get the two lines correct.\n\n## Task 3: recoding and writing to file\n\n-   Read a CSV file\n\n-   Split it into subsets based on features of the data\n\n-   Write out subsets as CSV files\n\nWork on the first part in *ae\\-08\\-age\\-gaps\\-sales\\-import\\.qmd*.\n\n## Age gap in Hollywood relationships {.smaller}\n\n::: columns\n::: {.column width=\"25%\"}\n::: question\nWhat is the story in this visualization?\n:::\n:::\n\n::: {.column width=\"75%\"}\n![](images/09/hollywood-ages.jpeg){fig-align=\"center\" width=\"600\"}\n:::\n:::\n\n## Task 4: reading in from excel (yuck!)\n\n-   Using [**readr**](https://readr.tidyverse.org/):\n    -   Most commonly: `read_csv()`\n    -   Maybe also: `read_tsv()`, `read_delim()`, etc.\n\n. . .\n\n-   Using [**readxl**](https://readxl.tidyverse.org/): `read_excel()`\n\n. . .\n\n-   Using [**googlesheets4**](https://googlesheets4.tidyverse.org/): `read_sheet()` -- We haven't covered this in the videos, but might be useful for your projects\n\n\n## Reading Excel files\n\n-   Read an Excel file with non-tidy data\n\n-   Tidy it up!\n\nWork on the second part in *ae\\-08\\-age\\-gaps\\-sales\\-import\\.qmd*.\n\n## Sales data\n\n![](images/09/sales-excel.png)\n\n. . .\n\n::: question\nAre these data tidy? Why or why not?\n:::\n\n## Sales data\n\n::: question\nWhat \"data moves\" do we need to go from the original, non-tidy data to this, tidy one?\n:::\n\n![](images/09/sales-2.png){width=\"150\"}\n",
    "supporting": [
      "10-more-practice_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}