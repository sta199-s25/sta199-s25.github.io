{
  "hash": "58dbfac58977bd599c648fd3c19cfea2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 1\nsubtitle: From the Midwest to North Carolina\ncategories: Lab\ndescription: \"Due Wednesday January 22 at 11:59 PM\"\ndraft: false\n---\n\n\n\n\n\n# Introduction\n\nThis lab will introduce you to the course computing workflow. The main goal is to reinforce our demo of R and RStudio, which we will be using throughout the course both to learn the statistical concepts discussed in the course and to analyze real data and come to informed conclusions.\n\n::: callout-note\nR is the name of the programming language itself and RStudio is a convenient interface, commonly referred to as an integrated development environment or an IDE, for short.\n:::\n\nAn additional goal is to reinforce Git and GitHub, the version control, web hosting, and collaboration systems that we will be using throughout the course.\n\n::: callout-note\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like DropBox but much better).\n:::\n\nAs the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer. Before we get to that stage, however, you need to build some basic fluency in R. Today we begin with the fundamental building blocks of R and RStudio: the interface, reading in data, and basic commands.\n\n::: callout-warning\nThis lab assumes that you have already completed [Lab 0](lab-0.html). If you have not, please\n\n-   go back and do that first before proceeding and\n-   let your TA know as they will need to set up a Lab 1 repository for you before you can complete this lab.\n:::\n\n## Learning objectives\n\nBy the end of the lab, you will...\n\n-   Be familiar with the workflow using R, RStudio, Git, and GitHub\n-   Gain practice writing a reproducible report using Quarto\n-   Practice version control using Git and GitHub\n-   Be able to create data visualizations using `ggplot2`\n\n## Getting started\n\n### Step 1: Log in to RStudio\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.\n-   Click `STA198-199` under My reservations to log into your container. You should now see the RStudio environment.\n\n#### Refresher: R and R Studio\n\nBelow are the components of the RStudio IDE.\n\n![](images/lab-1/rstudio.png){fig-alt=\"RStudio IDE\"}\n\nBelow are the components of a Quarto (.qmd) file.\n\n![](images/lab-1/quarto.png){fig-alt=\"Quarto document\"}\n\n### Step 2: Clone the repo & start new RStudio project\n\n-   Go to the course organization at [github.com/sta199-s25](https://github.com/sta199-s25) organization on GitHub. Click on the repo with the prefix **lab-1**. It contains the starter documents you need to complete the lab.\n\n-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**). Click on the clipboard icon to copy the repo URL.\n\n-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\n-   Click *lab-1.qmd* to open the template Quarto file. This is where you will write up your code and narrative for the lab.\n\n### Step 3: Update the YAML\n\nThe top portion of your Quarto file (between the three dashed lines) is called **YAML**. It stands for \"YAML Ain't Markup Language\". It is a human-friendly data representation for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n-   Open the Quarto (`.qmd`) file in your project, change the author name to your name, and render the document.\n\n-   If you get a popup window error, click \"Try again\".\n\n-   Examine the rendered document and make sure your name is updated in the document.\n\n### Step 4: Commit your changes\n\n-   Go to the Git pane in RStudio. This will be in the top right hand corner in a separate tab.\n\n    If you have made changes to your Quarto (.qmd) file, you should see it listed here. If you have rendered the document, you should also see its output, a PDF file, listed there.\n\n-   Click on it to select it in this list and then click on **Diff**.\n\n    This shows you the *diff*erence between the last committed state of the document and its current state including changes. You should see deletions in red and additions in green.\n\n-   If you're happy with these changes, prepare the changes to be pushed to your remote repository.\n\n    -   First, **stage** your changes by checking the appropriate box on the files you want to prepare.\n\n    -   Next, write a meaningful commit message (for instance, \"Updated author name\") in the **Commit message** box.\n\n    -   Finally, click **Commit**. Note that every commit needs to have a commit message associated with it.\n\n::: callout-note\nYou don't have to commit after every change, as this would get quite tedious. You should commit states that are *meaningful to you* for inspection, comparison, or restoration (e.g., restoring a previous version of your document).\n\nIn the first few assignments, we will tell you exactly when to commit and, in some cases, what commit message to use. As the semester progresses, we will let you make these decisions.\n:::\n\n### Step 5: Pushing changes\n\nNow that you have made an update and committed this change, it's time to push these changes to your repo on GitHub.\n\n-   In the Git pane, click on Push.\n\n-   Then, make sure all the changes went to GitHub. Go to your GitHub repo in your browser and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub, and you're good to go!\n\n::: callout-warning\nIf you don't see your update, go back to Step 4. Remember that in order to push your changes to GitHub, you must have **staged** (checked boxes) your **commit** (with a commit message) to be pushed and then click on **Push**.\n:::\n\n## Packages\n\nIn this lab we will work with the **tidyverse** package, which is a collection of packages for doing data analysis in a \"tidy\" way.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n\n-   **Run** the code cell by clicking on the green triangle (play) button for the code cell labeled `load-packages`. This loads the package to make its features (the functions and datasets in it) be accessible from your *Console*.\n-   Then, **render** the document which loads this package to make its features (the functions and datasets in it) be available for other code cells in your Quarto document.\n\n### Refresher: tidyverse\n\nThe tidyverse is a meta-package. When you load it you get nine packages loaded for you:\n\n-   **dplyr**: for data wrangling\n-   **forcats**: for dealing with factors\n-   **ggplot2**: for data visualization\n-   **lubridate**: for dealing with dates\n-   **purrr**: for iteration with functional programming\n-   **readr**: for reading and writing data\n-   **stringr**: for string manipulation\n-   **tibble**: for modern, tidy data frames\n-   **tidyr**: for data tidying and rectangling\n\n## Guidelines\n\nAs we've discussed in lecture, your plots should include an informative title, axes and legends should have human-readable labels, and careful consideration should be given to aesthetic choices.\n\nAdditionally, code should follow the [tidyverse style](https://style.tidyverse.org/). Particularly,\n\n-   there should be spaces before and line breaks after each `+` when building a `ggplot`,\n\n-   there should also be spaces before and line breaks after each `|>` in a data transformation pipeline,\n\n-   code should be properly indented,\n\n-   there should be spaces around `=` signs and spaces after commas.\n\nFurthermore, all code should be visible in the PDF output, i.e., should not run off the page on the PDF. Long lines that run off the page should be split across multiple lines with line breaks.[^1]\n\n[^1]: Remember, haikus not novellas when writing code!\n\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course. There will be periodic reminders in this assignment to remind you to **render, commit, and push** your changes to GitHub.\n\n::: callout-important\nYou should have at least 3 commits with meaningful commit messages by the end of the assignment.\n:::\n\n# Questions\n\n## Part 1 - Let's take a trip to the Midwest!\n\nWe will use the `midwest` data frame for this lab. It is part of the **ggplot2** R package, so the `midwest` data set is automatically loaded when you load the tidyverse package.\n\nThe data contains demographic characteristics of counties in the Midwest region of the United States.\n\nBecause the data set is part of the **ggplot2** package, you can read documentation for the data set, including variable definitions by typing `?midwest` in the Console or searching for `midwest` in the Help pane.\n\n### Question 1\n\nVisualize the distribution of population density of counties using a histogram with `geom_histogram()` with four separate binwidths: a binwidth of 100, a binwidth of 1,000, a binwidth of 10,000, and a binwidth of 100,000. For example, you can create the first plot with:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(midwest, aes(x = popdensity)) +\n  geom_histogram(binwidth = 100) +\n  labs(\n    x = \"Population density\",\n    y = \"Count\",\n    title = \"Population density of Midwestern counties\",\n    subtitle = \"Binwidth = 100\"\n  )\n```\n\n::: {.cell-output-display}\n![](lab-1_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n\nYou will need to make four different histograms. Make sure to set informative titles and axis labels for each of your plots. Then, comment on which binwidth is most appropriate for these data and why.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 1\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 2\n\nVisualize the distribution of population density of counties again, this time using a boxplot with `geom_boxplot()`. Make sure to set informative titles and axis labels for your plot. Then, using information as needed from the box plot as well as the histogram from Question 1, describe the distribution of population density of counties and comment on any potential outliers, making sure to identify at least one county that is a clear outlier by name in your narrative and commenting on whether it makes sense to you that this county is an outlier. You can use the data viewer to identify the outliers interactively, you do not have to write code to identify them.\n\n::: callout-important\nIn describing a distribution, make sure to mention shape, center, spread, and any unusual observations.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 2\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 3\n\nUse `geom_point` to create a scatterplot of the percentage below poverty (`percbelowpoverty` on the y-axis) versus percentage of people with a college degree (`percollege` on the x-axis), where the color [**and**]{.underline} shape of points are determined by `state`. Make sure to set informative titles, axis, and legend labels for your plot. First, describe the overall relationship between percentage of people with a college degree and percentage below poverty in Midwestern states, making sure to identify at least one county that is a clear outlier by name in your narrative. You can use the data viewer to identify the outliers interactively, you do not have to write code to identify them. Then, comment on whether you can identify how this relationship varies across states.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 3\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 4\n\nNow, let's examine the relationship between the same two variables, once again using different colors and shapes to represent each state, and using a separate plot for each state, i.e., with faceting with `facet_wrap()`. In addition to points (`geom_point()`), represent the data with a smooth curve fit to the data with `geom_smooth()`, with the argument `se = FALSE`. Make sure to set informative titles, axis, and legend labels for your plot. Which plot do you prefer - this plot or the plot in Question 3? Briefly explain your choice.\n\n::: callout-note\n`se = FALSE` removes the confidence bands around the line. These bands show the uncertainty around the smooth curve. We'll discuss uncertainty around estimates later in the course and bring these bands back then.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 4\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 5\n\nRecreate the plot below, and then give it a title. Then, identify at least one county that is a clear outlier in Wisconsin (WI) by name. You can use the data viewer to identify them interactively, you do not have to write code. Comment on the population composition of this county by investigating the percentage of other races living there.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](lab-1_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n::: callout-tip\n## Hint\n\n-   [The `ggplot2` reference for themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) will be helpful in determining the theme.\n-   The `size` of the points is 2.\n-   The transparency (`alpha`) of the points is 0.5.\n-   You can put line breaks in labels with `\\n`.\n:::\n\n::: render-commit-push\nNow is another good time to render, commit, and push your changes to GitHub with a meaningful commit message.\n\nAnd once again, make sure to commit and push all changed files so that your Git pane is empty afterward. We keep repeating this because it's important and because we see students forget to do this. So take a moment to make sure you're following along with the version control instructions.\n:::\n\n## Part 2 - Enough about the Midwest!\n\nIn this part we will use a new, more recent, and potentially more relevant dataset on counties in North Carolina.\n\nThis dataset is stored in a file called `nc-county.csv` in the `data` folder of your project/repository.\n\nYou can read this file into R with the following code:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_county <- read_csv(\"data/nc-county.csv\")\n```\n:::\n\n\n\n\n\nThis will read the CSV (comma separated values) file from the `data` folder and store the dataset as a data frame called `nc_county` in R.\n\nThe variables in the dataset and their descriptions are as follows:\n\n-   `county`: Name of county.\n-   `state_abb`: State abbreviation (NC).\n-   `state_name`: State name (North Carolina).\n-   `land_area_m2`: Land area of county in meters-squared, based on the 2020 census.\n-   `land_area_mi2`: Land area of county in miles-squared, based on the 2020 census.\n-   `population`: Population of county, based on the 2020 census.\n-   `density`: Population density calculated as population divided by land area in miles-squared.\n\nIn addition to being more recent and more relevant, this dataset is also more complete in the sense that we know the units of population density: people per mile-squared!\n\n### Question 6\n\nFirst, guess what the relationship between population density and land area might be – positive? negative? no relationship?\n\nThen, make a scatter plot of population density (`density` on the y-axis) vs. land area in miles-squared (`land_area_mi2` on the x-axis). Make sure to set an informative title and axis labels for your plot. Describe the relationship. Was your guess correct?\n\n### Question 7\n\nNow make a scatter plot of population density (`density` on the y-axis) vs. land area in meters-squared (`land_area_m2` on the x-axis). Make sure to set an informative title and axis labels for your plot. Comment on how this scatterplot compares to the one in Exercise 6 — is the relationship displayed same or different. Explain why.\n\n## Part 3 - Potpourri graded for a good faith effort\n\n### Question 8\n\nOne of the key reasons we care about data science and statistics in the first place is because they can help us make decisions under uncertainty. For example:\n\n-   When we save for retirement, we have to make a decision about what asset classes to invest in (stocks, bonds, real estate, etc) and in what proportions. We want to make the most stable and lucrative choice possible, accounting for the fact that we are uncertain about how the assets will ultimately perform. Data on past asset performance may help guide this decision;\n-   When insurance companies sell policies, they have to decide who to sell to and what sized premium to charge. They face uncertainty about how many policies will ultimately result in a claim (if it's everyone, they're ruined). In order to navigate this environment, they employ armies of *actuaries* to study historical data and help make decisions about profit, loss, and risk of ruin;\n-   Good barbecue cannot be made-to-order. A restaurant has to start preparing in the morning, before they know for certain how many folks will show up that day. If they prepare too little, they have to turn a lot of folks away and forfeit their money. If they prepare too much, it can go to waste. So a decision must be made under uncertainty, and it can be guided by historical data on demand, as it varies over the week and the year and during holidays and special events;\n-   The manager of a presidential campaign must decide how to allocate the campaign's resources to different states, counties, neighborhoods, types of media, etc. But these decisions are made before they know how the voters will ultimately behave, and so they try to resolve this uncertainty by analyzing all sorts of data: polling, prediction markets, social media sentiment, economic indicators, historical trends, etc.\n-   You darn Duke students must decide what time you're going to grab lunch at WU, subject to uncertainty about how long the lines will be. When you first matriculate, you might get burned a few times because you have no experience to base this decision on. By your senior year, you've accumulated a lot of data about the good and bad times at the different vendors, and how these vary across the days of the week and seasons of the year.\n\nYou get the idea. Now it's your turn. Write a few paragraph describing an example from your everyday life where you have to make a decision under uncertainty (obviously, don't recycle one of the examples above). What's the decision? What are the sources of uncertainty? What is your decision-making process? What data, if it were available, could you consult to resolve some of this uncertainty and help you meet your objective?\n\n::: callout-warning\n## Don't break my heart.\n\nThis is graded for completion, but JZ will read all of them. I am not interested in an example from ChatGPT's everyday life where it has to make a decision under uncertainty. I want to know about you.\n:::\n\n### Question 9\n\n**Data science** is the process of turning messy, incomplete, imperfect data into knowledge, and **statistics** studies how we can quantify our uncertainty about that knowledge. To illustrate these ideas, we played a game on the first day of class; you were given data of various kinds about a celebrity (names vs pictures, clear pictures vs noisy ones), and you were asked to answer a simple question with a quantitative answer: how old is the person? The results of this exercise are memorialized in the lecture slides from that day, and I summarized some of the high-level lessons [here](https://sta199-s25.github.io/slides/00-welcome.html#/statistical-lessons).\n\nWrite a paragraph or two summarizing another lesson that we can learn from this game. It can be a generic, high-level lesson about the practice of data science and stats, like the ones I listed. It can be a lesson about the application itself that you took away from reviewing the substantive results. Or, you can cast your mind back to when you were guessing, and you can describe and evaluate your guessing process with the benefit of hindsight. What factors were you weighing and/or neglecting? Did you learn anything that could make you a better age-guesser in the future?\n\nAs you ponder this, note that you have access to [the complete dataset](https://github.com/sta199-s25/hello-world/blob/main/age_guesses.csv) of everyone's guesses. Feel free to play around with it.\n\n### Question 10\n\nDid you select your pages on Gradescope? You don't need to write an answer for this question, if you select your pages when you upload your lab to Gradescope, you'll get full points on this question. Otherwise, you'll get a 0 on this question.[^2]\n\n[^2]: We're assigning points to this seemingly trivial task because not selecting your pages and questions will greatly slow down the grading. So we want to make sure you're properly motivated to complete this task!\n\n### Question 11\n\nRecommend some music for us to listen to while we grade this.\n\n::: callout-note\nNot worth any points, but still important.\n:::\n\n# Wrap-up\n\n## Submission\n\nOnce you are finished with the lab, you will submit your final PDF document to Gradescope.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all of your documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\n\nYou must turn in a PDF file to the Gradescope page by the submission deadline to be considered \"on time\".\n:::\n\nTo submit your assignment:\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with question. All the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   rendered your Quarto document\n-   committed and pushed everything to your GitHub repository such that the Git pane in RStudio is empty\n-   uploaded your PDF to Gradescope\n-   selected pages associated with each question on Gradescope\n:::\n\n## Grading and feedback\n\n-   Some of the questions will be graded for accuracy.\n\n-   Some will be graded for completion.\n\n-   Question 10 is just asking you to select your pages on Gradescope, and you get points for following the instructions!\n\n-   There are also workflow points, for coding style, for committing at least three times as you work through your lab, and for overall organization.\n\n-   You'll receive feedback on your lab on Gradescope within a week.\n\nGood luck, and have fun with it!\n",
    "supporting": [
      "lab-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}